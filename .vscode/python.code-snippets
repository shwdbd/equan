{
	// Place your fd workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"HEADER": {
		"prefix": "header",
		"body": [
			"#!/usr/bin/env python",
			"# -*- encoding: utf-8 -*-",
			"'''",
			"@File    :   $TM_FILENAME",
			"@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"@Author  :   Jeffrey Wang",
			"@Version :   1.0",
			"@Contact :   shwangjj@163.com",
			"@Desc    :   None",
			"'''",
			"",
			"# here put the import lib",
			"$0"
		],
	},
	"DEF": {
		"prefix": "def",
		"body": [
			"def $1($2):",
			"    \"\"\"",
			"    param $2:",
			"    return:",
			"    \"\"\"",
			"    $0"
		],
	},
	"NEW_STRATEGY": {
		"prefix": "new_s",
		"body": [
			"from equan.fund.fund_backtesting import FundBackTester",
			"from equan.fund.fund_backtesting_impl import Account, FundUnverise",
			"import equan.fund.tl as tl",
			"",
			"log = tl.get_logger()",
			"",
			"",
			"class MyStrategy(FundBackTester):",
			"    \"\"\"基金回测",
			"    \"\"\"",
			"",
			"    def __init__(self):",
			"        super().__init__()",
			"        # 账户",
			"        fund_acct = Account('基金账户', initial_capital=10*10000)",
			"        self.get_context().add_account(fund_acct)",
			"",
			"        # 资产池",
			"        self.set_unverise(FundUnverise(['000000']))",
			"",
			"    def initialize(self):",
			"        # 回测前准备",
			"        pass",
			"",
			"    def date_handle(self, context):",
			"        # 日间业务逻辑",
			"        today = context.today",
			"        log.info('today is ' + today)",
			"",
			"    def after_dayend(self, context):",
			"        # 日终后业务逻辑",
			"        pass",
			"",
			"    def end(self):",
			"        # 策略最后的处理",
			"        pass",
			"",
		],
	}
}